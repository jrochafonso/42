	(installing debian-11.2.0-amd64-netinst.iso)

using virtualbox:
boot primary 500mb
all the following are logical:
root 2gb (if 8gb) + subject
var-log (manually)

	(for use in virtualbox machine):
cmd + t = snapshot

	(if your virtualbox app does not let you change the snapshots destination):

nano /Users/jrocha-a/Library/VirtualBox/VirtualBox.xml
original:
src="/Users/jrocha-a/VirtualBox VMs/b2br/b2br.vbox"
defaultMachineFolder="/Users/jrocha-a/VirtualBox VMs"
changed:
src="/System/Volumes/Data/sgoinfre/jrocha-a/VirtualBox VMs/b2br/b2br.vbox”
defaultMachineFolder="/System/Volumes/Data/sgoinfre/jrocha-a/VirtualBox VMs/b2br/b2br.vbox"

	(extra cmd – all for eva)

sudo aa-status					#check apparmor status
sudo service ufw status				#check ufw status !
sudo service ssh status				#check ssh status
hostnamectl						#check operating system
sudo hostnamectl set-hostname (hostname)	#change hostname
	sudo nano /etc/hostname
groups jrocha-a					#check groups of the user @
getent group user42					#check users from group “user42” or whatever group
getent group sudo					#check users from group “sudo” 
sudo adduser jrocha-a				#create a new user @
thenewB0rn
sudo nano /etc/login.defs				#line 159 show pw expiration policy
sudo nano /etc/pam.d/common-password	#line 25 show pw policy
sudo chage -l jrocha-a				#verify pw policy for the user @
sudo addgroup evaluating				#create group “evaluating”
sudo adduser jrocha-a evaluating			#add user to specific group
sudo deluser (user)					#del user
sudo userdel -f (user)
sudo delgroup (group)				#del group
lsblk							#view partitions
sudo adduser (user) sudo				#add new user to sudo group @*
cat /etc/passwd | cut -d: -f1				#list usernames using cut to isolate users @
sudo ufw status					#ufw status and list active rules
sudo service ufw status
sudo ufw allow 8080				#create rule for port 8080
sudo ufw status					#check rule for port 8080
sudo ufw delete allow 8080			#delete rule for port 8080
sudo service ssh status				#check if ssh service is installed
sudo nano /etc/ssh/sshd_config			#check ssh settings
sudo nano /etc/ssh/ssh_config			#not necessary
su (user)						#change user
usermod -l (new login) (old login)			#change user name
echo $0						#see prog i’m using

in /etc/ssh/ssh_config:
PermitRootLogin no

jrocha-a2@jrocha-a42:/etc/sudoers.d$ cd
jrocha-a2@jrocha-a42:~$ cd ..
jrocha-a2@jrocha-a42:/home$ ls
jrocha-a  jrocha-a2  lost+found
jrocha-a2@jrocha-a42:/home$ sudo rm -rf jrocha-a

ssh: to login with a new user: new terminal: ssh (user)@(localhost) -p 4242

sudo crontab -e					#access crontab settings

monitoring script: architecture: uname -a	
monitoring script: cpu physical: cat /proc/cpuinfo | grep ‘physical id’ | sort -u | wc -l


	(install sudo and add user to groups)

login as root: su (man su)
apt-get install sudo
sudo usermod -aG sudo jrocha-a			#give user sudo privileges*
sudo reboot
sudo -v
sudo addgroup user42
sudo adduser jrocha-a user42
sudo apt update

	(install ssh)

su
sudo apt install openssh-server
sudo nano /etc/ssh/sshd_config
(change port to 4242)
(change PermitRootLogin from “prohibit-password” to “no”)
(so i can only access port 4242 from login, and not root, that means you cannot login remotely to root)
sudo service ssh status (to see if it’s active and in which port it’s listening)

	(install ufw)

sudo apt install ufw (to install firewall)
sudo ufw status (it’s inactive)
sudo ufw enable (voilá)
sudo ufw allow 4242 ( /tcp)

	(config sudo)

(cd) /etc/sudoers.d
sudo visudo

#add:
Defaults	secure_path=“/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin” #if you need to
Defaults	requiretty
Defaults	logfile=“/var/log/sudo/sudo.log”
Defaults	log_input, log_output
Defaults	passwd_tries=3
Defaults	insults #bypasses badpass
Defaults	badpass_message=“please re-enter password to delete /var/log/sudo/sudo.log”

(end)

#copy all the content in “sudo visudo” and paste it to (it will be useful later, during eva): #no
sudo nano /etc/sudoers.d/sudoconfig							         #no

	(set password policy)

sudo nano /etc/login.defs

#replace:
PASS_MAX_DAYS	99999  ->  PASS_MAX_DAYS	30
PASS_MIN_DAYS	0          ->  PASS_MIN_DAYS	2

PASS_WARN_AGE is already 7

sudo apt install libpam-pwquality
sudo nano /etc/pam.d/common-password

to the end of password requisite pam_pwquality.so retry=3 add:
ucredit=-1		#set at least one upper-case letter in the pw
lcredit=-1		#set at least one lower-case letter in the pw
dcredit=-1		#set at least one digit in the pw
minlen=10		#set the minimum length in the pw
maxrepeat=3		#set max consecutive identical chars in the pw
usercheck=0		#to check if the pw contains the username in some form
difok=7		#set a minimum number of chars that must be different from the old pw
enforce_for_root	#to the root pw comply to this policy

change your passwords if they don’t comply to the pw policy
if they don’t:
passwd		#change user password
sudo passwd		#change root password

sudo reboot

	(assemble remote SSH to use OS terminal)

sudo apt install openssh-server	#install openssh if not installed
sudo systemctl status ssh		#to verify ssh service
ip a					#to get your ip
sudo apt install ufw			#install ufw firewall
sudo ufw enable			#activate ufw
sudo ufw status			#to check if it’s enable

sudo reboot

from VM:
ip addr						#copy ip
sudo ssh -p 4242 jrocha-a@10.11.248.71	#just an example

from OS terminal:
ssh -p 4242 jrocha-a@10.11.248.71

	(create script)

sudo nano /usr/local/bin/monitoring.sh

my script, in nano:

#!/bin/bash

arch=$(uname -a)
phycpu=$(grep "physical id" /proc/cpuinfo | sort | uniq | wc -l)
virtcpu=$(grep "^processor" /proc/cpuinfo | wc -l)
ram_free=$(free -m | grep Mem | awk '{print $4}')
ram_total=$(free -m | grep Mem | awk '{print $2}')
ram_usage_percent=$(free -m | grep Mem | awk '{printf("%.2f"), $3/$2*100}')
free_disk=$(df -Bm | grep '^/dev/' | grep -v '/boot$' | awk '{fdisk += $4} END {print fdisk}')
total_disk=$(df -Bg | grep '^/dev/' | grep -v '/boot$' | awk '{tdisk += $2} END {print tdisk}')
disk_usage_percent=$(df -Bm | grep '^/dev/' | grep -v '/boot$' | awk '{fdisk += $3} {tdisk += $2} END {printf("%.2f"), fdisk/tdisk*100}')
proc_usage_percent=$(top -bn1 | grep '^%Cpu' | awk '{printf("%.1f%%"), $2}')
last_boot=$(who -b | awk '{print $3 " " $4}')
lvm_active=$(lsblk | grep 'lvm' | awk '{if ($1) {printf "\033[0;32mYes\033[0m";exit} else {print "\033[0;031mNo\033[0m";exit;}}')
n_active_connect=$(ss -t | grep ESTAB | wc -l)
n_users_server=$(who | cut -d " " -f 1 | sort -u | wc -l)
ipv4=$(hostname -I)
mac=$(ip link show | grep ether | awk '{print $2}')
n_commands_sudo=$(journalctl _COMM=sudo | grep COMMAND | wc -l)

wall "        #Architecture: $arch
        #pCPU: $phycpu
        #vCPU: $virtcpu
        #RAM free: ${ram_free}MB/${ram_total}MB ($ram_usage_percent%)
        #Disk free: ${free_disk}MB/${total_disk}GB ($disk_usage_percent%)
        #CPU load: $proc_usage_percent
        #Last boot: $last_boot
        #LVM use: $lvm_active
        #Connections TCP: $n_active_connect ESTABLISHED
        #User log: $n_users_server
        #Network: IP $ipv4 ($mac)
        #Sudo: $n_commands_sudo cmd
        #
        #press ENTER to exit."

(end)

sudo visudo
	#bellow %sudo in #Allow members of group sudo to execute any command, add:
jrocha-a ALL=(ALL) NOPASSWD: /usr/local/bin/monitoring.sh

sudo crontab -e
	#at the end of file, add:
*/10 * * * * bash /usr/local/bin/monitoring.sh
@reboot /usr/local/bin/monitoring.sh
@reboot sleep 10; bash /usr/local/bin/monitoring.sh
